/* Задание 1. Реализация имитации аудиоплеера

Что нужно сделать
С помощью классов реализуйте программу имитации работы аудиоплеера. В плеере
находится несколько аудиозаписей, доступных для воспроизведения. Для них вы
должны создать отдельный класс Track. Полями этого класса должны быть: название,
дата создания (здесь вы можете использовать тип std::tm) и продолжительность
записи в секундах. Сам плеер тоже реализуйте с помощью класса. Внутри он должен
содержать список доступных записей и нужные для логики работы плеера поля.

Пользователь взаимодействует с программой с помощью команд:

• Команда play запрашивает у пользователя название записи для воспроизведения и
начинает её воспроизведение. Воспроизведение симулируется с помощью вывода в
консоль всей информации о записи. Если произведение какой-то записи уже начато,
ничего не происходит.
• Команда pause. Ставит запись на паузу, о чём выводит
соответствующее сообщение в консоль. Если запись уже на паузе или не
воспроизводится вовсе, ничего не происходит.
• Команда next переходит к
следующей записи для воспроизведения. Запись при этом выбирается случайно, как
будто плеер работает в режиме shuffle.
• Команда stop прекращает воспроизведение
текущей записи, если таковая имеется. Об этом выводится сообщение в консоль. Два
раза остановить воспроизведение невозможно, так что команда должна срабатывать
только в первом случае.
• Команда exit — выход из программы.

Советы и рекомендации
Забудьте про отдельные глобальные функции и используйте возможности классов и
методов по максимуму.

Что оценивается
Корректность работы программы.
*/

#include "AudioPlayer.h"
#include "Track.h"
#include <iostream>
#include <string>

int main(int argc, char const *argv[]) {
    // Приветствие
    std::cout << "Продвинутые темы и техники C++\n";
    std::cout << "Урок 8. Введение в ООП. Часть 1\n";
    std::cout << "Задание 1. Реализация имитации аудиоплеера\n\n";

    std::time_t t = std::time(nullptr);
    std::vector<Track> pl;
    pl.push_back(Track("rec1", *std::localtime(&t), 10));
    t -= 80000; // чтобы время отличалось почти на сутки
    pl.push_back(Track("rec2", *std::localtime(&t), 20));
    t -= 80000;
    pl.push_back(Track("rec3", *std::localtime(&t), 30));
    t -= 80000;
    pl.push_back(Track("rec4", *std::localtime(&t), 40));
    t -= 80000;
    pl.push_back(Track("rec5", *std::localtime(&t), 50));

    AudioPlayer *audioPlayer = new AudioPlayer(pl);
    std::string command;
    while (true) {
        std::cout << "\nСписок команд :\nplay\npause\nnext\nstop\nexit\n";
        std::cout << "Введите команду: ";
        std::cin >> command;
        if (command == "play") {
            if (audioPlayer->getIsPlay()) {
                continue;
            }
            // на паузе не нужен ввод названия трека
            if (!audioPlayer->getIsPause()) {
                std::string trackName;
                std::cout << "Введите название записи: ";
                std::cin >> trackName;
                // воспроизводим только треки из плейлиста
                if (audioPlayer->selectTrack(trackName)) {
                    audioPlayer->play();
                } else {
                    std::cout << "Запись не найдена." << std::endl;
                }
            } else {
                audioPlayer->play();
            }
        } else if (command == "pause") {
            audioPlayer->pausePlay();
        } else if (command == "next") {
            audioPlayer->nextTrack();
        } else if (command == "stop") {
            audioPlayer->stopPlay();
        } else if (command == "exit") {
            std::cout << "\nДо новых встреч!\nЗавершение работы приложения."
                      << std::endl;
            break;
        } else {
            std::cout << "\nОшибка ввода команды.\n";
        }
    }
    delete audioPlayer;
    return 0;
}
