/* Задание 2. Игра по ловле рыбы

Что нужно сделать
Реализуйте простую игру-симуляцию ловли рыбы. Игровое поле представляет собой
девять секторов условного пруда. В начале игры в одном из этих секторов с
помощью генератора случайных чисел оказывается рыба. Точно так же, случайным
образом, по секторам пруда распределяются и три сапога. Сапог и рыба при этом не
могут находиться в одном и том же секторе одновременно, как и несколько сапог
сразу в одном из секторов. Игрок закидывает удочку с приманкой в один из
секторов, номер которого вводится стандартным способом через консоль. Задача
игрока — угадать сектор, в котором находится рыба и, таким образом, поймать её.
Если игрок попал на пустой сектор, то удочку надо забросить повторно. Если игрок
поймал сапог, то игра завершается с отрицательным результатом. Реализовать
задачу нужно с помощью исключений: когда успешный заброс удочки генерирует
специальное пользовательское исключение, после чего программа должна завершиться
и оповестить пользователя об успешной рыбалке и количестве попыток, которое ему
для этого потребовалось. Если же был пойман сапог, то должно выводиться
сообщение о неудачной ловле.

Рекомендации
Вспомните, что вы можете выбросить в качестве исключения произвольный тип
данных. Это может быть и сапог, и рыба. В функции main потребуется расположить
рыбу случайным образом. Для этого сделайте std::srand(std::time(nullptr)); а
затем само расположение: field[std::rand() % 9].fish = new Fish(); Благодаря
оператору % вы не выйдете за пределы массива.

Что оценивается
Корректность работы игровой логики. Точность использования исключений.
*/

#include <cstdlib>
#include <ctime>
#include <exception>
#include <iostream>

class FishException : public std::exception {
  public:
    const char *what() const noexcept override {
        return "Успешный заброс удочки!\nВы поймали рыбу!\n";
    }
};

class BootException : public std::exception {
  public:
    const char *what() const noexcept override {
        return "Неудачная ловля!\nВы поймали сапог!\n";
    }
};

// забросить удочку
void CastFishingRod(int pond[9], int sector) {
    if (sector < 1 || sector > 9) {
        throw std::invalid_argument(
            "Сектор указан ошибочно. Есть сектора от 1 до 9.\n");
    } else if (pond[sector - 1] == 1) {
        throw FishException();
    } else if (pond[sector - 1] == 2) {
        throw BootException();
    }
}

int main(int argc, char const *argv[]) {
    // Приветствие
    std::cout << "Продвинутые темы и техники C++\n";
    std::cout << "Урок 15. Использование исключений\n";
    std::cout << "Задание 2. Игра по ловле рыбы\n\n";

    int pond[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

    std::srand(std::time(nullptr));

    // В случайном секторе выпускае рыбу
    pond[std::rand() % 9] = 1;

    // Распределяем 3 сапога по секторам
    int i = 0;
    while (i < 3) {
        int index = std::rand() % 9;
        if (pond[index] == 0) {
            pond[index] = 2;
            ++i;
        }
    }

    // попытки заброса удочки
    int attempts = 0;
    int sector;
    while (true) {
        std::cout << "Введите номер сектора для ловли от 1 до 9: ";
        std::cin >> sector;
        try {
            CastFishingRod(pond, sector);
        } catch (const std::invalid_argument &e) {
            std::cout << e.what();
            continue;
        } catch (const FishException &e) {
            ++attempts;
            std::cout << e.what();
            std::cout << "Количество попыток: " << attempts << std::endl;
            break;
        } catch (const BootException &e) {
            std::cout << e.what();
            std::cout << "Повезет в следующий раз.\n";
            break;
        }
        std::cout << "В секторе " << sector << " пусто." << std::endl;
        ++attempts;
    }
    return 0;
}
