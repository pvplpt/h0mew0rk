/*Задание 2. Симуляция работы вокзала

Что нужно сделать
С помощью многопоточности реализуйте простую модель железнодорожного вокзала.
С трёх точек отправления в разное время отбывают три разных поезда с условными
обозначениями A, B, C. Все они идут на один и тот же вокзал и могут дойти до
него в разное время. На этом целевом вокзале единовременно может находиться
только один поезд. Остальные поезда должны ждать, пока уже занятое место
освободится. В начале программы пользователь последовательно вводит для каждого
поезда время в пути до вокзала (в секундах). После этого поезда начинают своё
движение за заданное количество времени. Как только поезд прибыл на вокзал, он
ожидает от пользователя команды depart, которая сигнализирует о его отбытии с
вокзала. По всем событиям (прибытие на вокзал, ожидание свободного места,
отбытие с вокзала) вместе с условным обозначением поезда выводятся сообщения в
консоль. Программа завершается, когда на вокзале побывают все три поезда.

Советы и рекомендации
Используйте для вокзала отдельный мьютекс и симулируйте ожидание с помощью него.

Что оценивается
Корректность работы программы и безопасность использования общих ресурсов.
*/

#include <iostream>
#include <mutex>
#include <string>
#include <thread>

std::mutex accessToResources;

void trainMovement(std::string name, int travelTime) {
    std::string msg = "Поезд " + name + " отправился в путь. ";
    msg += "Время в пути " + std::to_string(travelTime) + " сек.\n";
    std::cout << msg;
    std::this_thread::sleep_for(std::chrono::seconds(travelTime));
    // если вокзал занят
    if (!accessToResources.try_lock()) {
        msg = "Поезд " + name + " ожидает свободного места.\n";
        std::cout << msg;
        accessToResources.lock(); // ждем освобождения вокзала
    }
    std::cout << "Поезд " << name << " прибыл на вокзал.\n";
    std::string command;
    msg = "Введите команду depart для отправления поезда " + name + "\n";
    do {
        std::cout << msg;
        std::cin >> command;
    } while (command != "depart");
    std::cout << "Поезд " << name << " отбыл с вокзала. Счастливого пути!\n";
    accessToResources.unlock(); // вокзал свободен
}

int main(int argc, char const *argv[]) {
    // Приветствие
    std::cout << "Продвинутые темы и техники C++\n";
    std::cout << "Урок 10. Введение в многопоточность\n";
    std::cout << "Задание 2. Симуляция работы вокзала\n\n";

    int travelTime1;
    std::cout << "Введите для поезда А время в пути до вокзала (в секундах):";
    std::cin >> travelTime1;
    int travelTime2;
    std::cout << "Введите для поезда B время в пути до вокзала (в секундах):";
    std::cin >> travelTime2;
    int travelTime3;
    std::cout << "Введите для поезда C время в пути до вокзала (в секундах):";
    std::cin >> travelTime3;

    std::thread trainA(trainMovement, "A", travelTime1);
    std::thread trainB(trainMovement, "B", travelTime2);
    std::thread trainC(trainMovement, "C", travelTime3);

    trainA.join();
    trainB.join();
    trainC.join();

    return 0;
}
