/*2. Модель данных для посёлка

Что нужно сделать
Используя структуры данных, создайте подробную модель посёлка.
Что известно
• Посёлок состоит из участков, и у каждого участка есть свой номер.
• На любом участке может стоять жилой дом, а также могут быть и другие
сооружения: — гараж, — сарай (бытовка), — баня. • У каждого здания есть
информация о площади, которую оно занимает на участке. • В доме может быть 1–3
этажа, на этаже — 2–4 комнаты: — спальня, — кухня, — ванная, — детская, —
гостиная. • У каждого этажа есть информация о количестве комнат и высоте потолка
на этаже. • У каждой комнаты есть информация о занимаемой площади. • В доме и
бане может быть печь с трубой. Для всех упомянутых сущностей нужно объявить
структуры данных.

Обязательно для выполнения задания
Опишите структуры данных для создания модели посёлка. Структуры должны быть:
• связными и легко расширяемыми,
• без дублирующих конструкций.

Дополнительно
Реализуйте заполнение структур данных.
Пользователь заполняет данные о посёлке: вводит общее количество участков, а
потом детализирует каждый. Сначала указывается количество построек на участке, а
затем — информация, какие это постройки, сколько этажей в доме, какие комнаты на
этажах. После ввода данных можно рассчитать суммарный параметр, например процент
земли, занимаемой постройками, от общей площади посёлка. Главное в этой задаче
не операция подсчёта, а структуры данных.

Советы и рекомендации
• Используйте свои знания о типах данных в C++.
• Можно применять перечисления и векторы, создавать структуры внутри структур и
так далее. • Перечислять комнаты и типы зданий нужно следующим образом:

enum room_type
{
living,
children,
…

• Затем нужно использовать полученный тип внутри структуры. Алгоритм заполнения
каждого объекта одинаковый: — создать объект нужного типа, — ввести с клавиатуры
значения, — добавить объект в вектор при помощи push_back.
*/

#include <iostream>
#include <vector>

// спальня, кухня, ванная, детская, гостиная
enum room_type { bedroom, kitchen, bathroom, childrens, living_room };

// дом, гараж, сарай, баня
enum type_construction { home, shed, hangar, vaporarium };

// Комната
struct room {
    room_type typeRoom;
    float squareRoom;
};

// Этаж
struct floor {
    int countRoom;
    float ceilingHeight;
    std::vector<room> rooms;
};
// Строение на участке
struct construction {
    type_construction typeBuilding;
    float square;
};

// Дом как строение
struct house : construction {
    int countFloor;
    std::vector<floor> floors;
    bool isStoveWithPipe = false;
};

// Гараж как строение
struct garage : construction {};

// Cарай как строение
struct barn : construction {};

// Баня как строение
struct bathhouse : construction {
    bool isStoveWithPipe = true;
};

// Участок
struct landPlot {
    int id;
    std::vector<construction *> buildings;
};

// Посёлок
struct village {
    std::vector<landPlot> settlement;
};

int main() {
    // Приветствие
    std::cout << "Продвинутые темы и техники C++\n";
    std::cout << "Урок 3. Структуры данных\n";
    std::cout << "Задание 2. Модель данных для посёлка\n\n";

    std::cout << "Без дополнительного задания.\n";
    return 0;
}
