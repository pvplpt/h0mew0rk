/* Задание 4. Реализация симуляции банкомата

Что нужно сделать
Требуется реализовать упрощённую симуляцию работы банкомата. В банкомате могут
храниться только бумажные купюры номиналом от 100 до 5000 рублей. Максимально в
банкомате может храниться только 1000 купюр. Все они записываются в отдельный
файл. У банкомата, как у устройства, две основных операции — снятие денег
пользователем и наполнение деньгами инкассаторами банка.

Наполнение банкомата происходит, если при старте программы в консоль вводится
символ плюс “+”. Количество купюр рассчитывается так, чтобы банкомат был
заполнен полностью. Все купюры при этом выбираются случайным образом. Если на
старте программы в консоль вводится минус (“-”), то симулируется снятие
пользователем денег. Пользователь указывает сумму с точностью до 100 рублей. Мы
будем считать, что каждый клиент обладает неограниченным балансом в системе и
теоретически может снять любую сумму. На практике, если данная сумма не может
быть снята из-за отсутствия подходящих денег в машине, показывается сообщение,
что эта операция невозможна. После выполнения любой из операций программа
завершает выполнение. Состояние банкомата должно храниться в отдельном бинарном
файле, автономно.

Советы и рекомендации
Вы можете хранить массив купюр целиком, помечая отсутствующие позиции нулями.

Что оценивается
Корректность работы программы симуляции банкомата. Инкассация и снятие денег
должны работать корректно.
*/

#include <ctime>
#include <fstream>
#include <iostream>

int main(int argc, char const *argv[]) {
    // Приветствие
    std::cout << "Продвинутые темы и техники C++\n";
    std::cout << "Урок 2. Запись в файлы\n";
    std::cout << "Задание 4. Реализация симуляции банкомата\n\n";

    int bankNotes[] = {100, 500, 1000, 2000, 5000};
    int cashMachine[] = {0, 0, 0, 0, 0}; // количество купюр каждого номинала
    int countCash[] = {0, 0, 0, 0, 0}; // количество купюр на выдачу
    std::srand(std::time(nullptr));

    // Ввод
    std::cout << "Введите символ + для наполнения банкомата или символ - для "
                 "снятия денег: ";
    char oper;
    std::cin >> oper;
    if (oper != '+' && oper != '-') {
        std::cout << "Ошибка ввода символа + или -\n";
        return 1;
    }

    if (oper == '+') {
        // Инкассация банкомата
        for (int i = 0; i < 1000; ++i) {
            cashMachine[std::rand() % 5] += 1;
        }
        std::ofstream file("ATM.bin", std::ios::binary);
        for (int i = 0; i < 5; ++i) {
            file.write((char *)&cashMachine[i], sizeof(cashMachine[i]));
        }
        file.close();
        std::cout << "Инкассация банкомата выполнена.\n";
    } else {
        // Снятие наличных
        std::ifstream file;
        file.open("ATM.bin", std::ios::binary);
        if (file) {
            int total = 0; // Общая сумма в банкомате
            for (int i = 0; i < 5; ++i) {
                file.read((char *)&cashMachine[i], sizeof(cashMachine[i]));
                total += bankNotes[i] * cashMachine[i];
            }
            file.close();
            std::cout << "Введите сумму снятия с точностью до 100 рублей: ";
            int cash;
            std::cin >> cash;
            if (cash <= 0) {
                std::cout << "Ошибка ввода положительной суммы для снятия.\n";
                return 1;
            }
            if (cash % 100 != 0) {
                std::cout << "Ошибка ввода суммы кратной 100.\n";
                return 1;
            }
            if (cash > total) {
                std::cout << "Операция невозможна. В банкомате меньше денег, "
                             "чем вам нужно.\n";
            } else {
                // Выдача денег

                for (int i = 4; i >= 0; --i) {
                    countCash[i] = cash / bankNotes[i];
                    if (countCash[i] > cashMachine[i]) {
                        countCash[i] = cashMachine[i];
                        cashMachine[i] = 0;
                    } else {
                        cashMachine[i] -= countCash[i];
                    }
                    cash -= countCash[i] * bankNotes[i];
                    if (cash <= 0) {
                        break;
                    }
                }
                if (cash == 0) {
                    std::cout << "Получите ваши деньги:\n";
                    for (int i = 0; i < 5; i++) {
                        if (countCash[i] > 0) {
                            std::cout << countCash[i] << " по " << bankNotes[i]
                                      << " руб.\n";
                        }
                    }
                    // Обновим состояние банкомата
                    std::ofstream file("ATM.bin", std::ios::binary);
                    for (int i = 0; i < 5; ++i) {
                        file.write((char *)&cashMachine[i],
                                   sizeof(cashMachine[i]));
                    }
                    file.close();
                } else {
                    std::cout << "Ошибка выдачи наличных.\n";
                    return 1;
                }
            }

        } else {
            std::cout << "Операция невозможна. Проинкассируйте банкомат.\n";
        }
    }

    return 0;
}
