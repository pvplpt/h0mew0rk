/* Задание 3. Валидация IP-адреса

Что нужно сделать
Проверьте, задаёт ли введённая пользователем строка корректный IP-адрес
четвёртой версии (IPv4). IP-адрес должен представлять из себя четыре числа,
разделённые точками без пробелов, причём каждое число должно быть в диапазоне от
0 до 255 включительно. Числа не должны содержать ведущих нулей. Других символов
в строке, кроме вышеописанных, быть не должно. Пользователь вводит строку,
задающую IP-адрес через стандартный ввод. В результате программа должна вывести
слово Valid, если адрес корректен, и слово Invalid, если это не так.

Примеры
Корректные:
127.0.0.1
255.255.255.255
1.2.3.4
55.77.213.101
Некорректные:
255.256.257.258 (есть числа больше 255)
0.55.33.22. (лишняя точка в конце)
10.00.000.0 (лишние нули)
23.055.255.033 (опять лишние нули)
65.123..9 (две точки подряд)
a.b.c.d (посторонние символы вместо чисел и точек)

Рекомендации
• Активно используйте оператор индексации строки str[i], но помните, что индексы
начинаются с нуля, а не с единицы.
• Создайте отдельную функцию для получения отдельных чисел из IP-адреса и
валидируйте эти отдельные числа.
• Для валидации отдельных цифр у чисел следует использовать оператор сравнения
с константами символов. Символы от ‘0’ до ‘9’ расположены последовательно и
поэтому уместны операторы <= и >=. Вам потребуется функция, принимающая на вход
строку со всем IP-адресом и порядковый номер октета. Октет — это часть IP-адреса
между точками. Он содержится в восьми битах, отсюда и название (окта — восемь).
2^8 = 256. Отсюда уже предел значения октета — 255. То есть вызов
get_address_part(“192.168.1.1”, 1) вернёт 168. Данная функция проходит по всей
строке и ищет разделители — точки, одновременно с этим накапливает символы в
строку, которую вернёт в результате. При нахождении разделителя нужно вернуть
полученную строку. Проверку её корректности нужно делать в другой функции
(проверить длину == 3 и то, что число в строке находится в диапазоне [0,255] ).

Что оценивается
Корректность валидации заданного пользователем адреса.
*/

#include <iostream>
#include <string>

bool isFourParts(const std::string &ipAddress, std::string octet[]);
bool isInvalidOctet(const std::string &octet);

int main(int argc, char const *argv[]) {
    // Приветствие
    std::cout << "Основы программирования на С++\n";
    std::cout << "Урок 11. Функции в программировании\n";
    std::cout << "Практическая работа\n";
    std::cout << "Задание 3. Валидация IP-адреса\n\n";

    // Ввод
    std::cout << "Введите IP-адрес: ";
    std::string userIP;
    getline(std::cin, userIP);

    // Решение
    std::string octet[4] = {"", "", "", ""};
    std::string result = "Invalid";
    if (isFourParts(userIP, octet)) {
        result = "Valid";
        for (int i = 0; i < 4; ++i) {
            if (isInvalidOctet(octet[i])) {
                result = "Invalid";
                break;
            }
        }
    }

    // Вывод
    std::cout << result << std::endl;
    return 0;
}

bool isFourParts(const std::string &ipAddress, std::string octet[4]) {
    if (ipAddress[0] != '.' && ipAddress[ipAddress.length() - 1] != '.') {
        int countPoint = 0;
        for (int i = 0; i < ipAddress.length(); ++i) {
            if (ipAddress[i] == '.') {
                if (ipAddress[i + 1] == '.') {
                    return false;
                }
                if (++countPoint >= 4) {
                    return false;
                };
            } else {
                octet[countPoint] += ipAddress[i];
            }
        }
        for (int i = 0; i < 4; ++i) {
            if (octet[i].length() < 1 || octet[i].length() > 3) {
                return false;
            }
        }
        return true;
    }
    return false;
}

bool isInvalidOctet(const std::string &octet) {
    for (int i = 0; i < octet.length(); ++i) {
        if (octet[i] < '0' || octet[i] > '9') {
            return true;
        }
    }
    if (octet.length() > 1 && octet[0] == '0') {
        return true;
    }
    if (octet.length() == 3 && octet[0] == '0' && octet[1] == '0') {
        return true;
    }
    int number = stoi(octet);
    if (number > 255 || number < 0) {
        return true;
    }

    return false;
}
