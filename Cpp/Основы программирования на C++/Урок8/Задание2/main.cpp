/* Задание 2. Immolate Improved!

Что нужно сделать
Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют огненными
шарами разной степени мощности, но у него есть очки здоровья и показатель
сопротивляемости магии. Очки здоровья, сопротивляемость магии и мощность
огненного шара — это вещественные числа от нуля до единицы включительно. Чем
больше мощность, тем больше урон здоровью, но чем больше сопротивляемость магии,
тем урон меньше. Например, если сопротивляемость равна нулю (0%), то будет
нанесён урон, равный мощности огненного шара. Если сопротивляемость равна
единице (100%), урон будет равен нулю, даже если мощность заклинания
максимальна.

Напишите программу, в которой пользователь сначала задаёт количество здоровья и
сопротивляемость магии орка, а после стреляет в него огненными шарами разной
мощности, пока орк не погибнет. Мощность удара вводится с клавиатуры с каждым
выстрелом. После каждого заклинания программа выводит на экран итоговый урон от
удара и оставшиеся очки здоровья орка. Показатель сопротивляемости магии не
изменяется при попадании. Обеспечьте контроль ввода.

Обратите внимание, что сопротивляемость обозначает только долю от повреждения,
которая приходится на орка. Пример:
Урон 0.1, сопротивляемость 0.5, по орку будет нанесено 0.05 урона;
Урон 0.2, сопротивляемость 0.5, по орку будет нанесено 0.1 урона;
Урон 1, сопротивляемость 0.2, по орку будет нанесено 0.8 урона.

Рекомендации по выполнению
Для решения использовать цикл while.

Что оценивается
Все величины должны измеряться в одной шкале — от 0 до 1.
Мощность удара считается с учётом сопротивляемости.
*/

#include <iostream>

int main() {
  // Приветствие
  std::cout << "Основы программирования на С++\n";
  std::cout << "Урок 8. Числа с плавающей запятой. Математические вычисления\n";
  std::cout << "Практическая работа\n";
  std::cout << "Задание 2. Immolate Improved!\n\n";

  // Ввод
  float hp;
  float magicResistance;
  std::cout << "Введите количество здоровья орка: ";
  std::cin >> hp;
  if (hp > 1.f || hp <= 0.f) {
    std::cout << "Введеное число должно быть больше 0 и не больше 1.";
    return 1;
  }
  std::cout << "Введите сопротивляемость магии орка: ";
  std::cin >> magicResistance;
  if (magicResistance > 1.f || magicResistance < 0.f) {
    std::cout << "Введеное число должно быть не меньше 0 и не больше 1.";
    return 1;
  }

  // Решение
  float fireballPower;
  do {
    std::cout << "Введите мощность огненного шара: ";
    std::cin >> fireballPower;
    if (fireballPower > 1.f || fireballPower < 0.f) {
      std::cout << "Введеное число должно быть не меньше 0 и не больше 1.\n";
      continue;
    }
    float damage = fireballPower - fireballPower * magicResistance;
    if (damage < 0.f) {
      damage = 0.f;
    }
    std::cout << "Урон " << fireballPower;
    std::cout << ", сопротивляемость " << magicResistance;
    std::cout << ", по орку будет нанесено " << damage << " урона\n";
    if (hp < damage) {
      damage = hp;
      hp = 0.f;
    } else {
      hp -= damage;
    }
    std::cout << "Итоговый урон от удара: " << damage << std::endl;
    std::cout << "Оставшиеся очки здоровья орка: " << hp << std::endl;
  } while (hp != 0.f);
  std::cout << "Орк погиб.\n";
}