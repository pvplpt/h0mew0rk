/* Задание 5. Пупырка

После посылки из Китая осталась спецплёнка для бережной перевозки груза —
пупырка. Всего в пупырке 12 на 12 шариков-пузырьков. Состояние любого пузырька:
он либо целый, либо нет, то есть true или false (тип массива — bool). Для начала
требуется реализовать отдельную функцию инициализации пупырки начальным
состоянием: полностью целая пупырка, все элементы true. Программа заключается в
последовательном лопании целых регионов пузырьков. Перед каждым таким лопанием
надо показывать пользователю полностью всю плёнку: o — это целый пузырёк, x —
лопнутый. Это тоже надо выделить в отдельную функцию. Итак, как выглядит само
лопание. Пользователь вводит две координаты: начала региона и конца региона.
Процедура лопания пузырей должна быть реализована с помощью отдельной функции,
все аргументы должны проверяться на валидность, что они в в рамках диапазона
возможных значений, иначе должна быть выведена ошибка. После лопания каждого
пузыря, который не был ещё лопнут до того, в консоль должно выводиться сообщение
“Pop!”. Лопание должно продолжаться до последнего пузырька. Как только вся
пупырка потрачена, программа заканчивает выполнение. Вы можете подсчитать
окончание в самой функции по отображению пузырьков плёнки, так как функция
выполняется после каждого лопания.

Советы и рекомендации
• Обратите внимание, что лопание пузырей делается с помощью региона, а не одной
точки.
• Регион задаётся двумя координатами, это координаты углов
прямоугольника.
• При лопании региона достаточно запустить цикл только по этим
элементам. Не нужно проходить каждый раз по всей матрице.
• Всю область плёнки удобно представить в виде
двумерного массива типа bool.
• Инициализировать вручную такой массив сложно,
лучше воспользоваться вложенными циклами.
• Для проверки на целостность одной ячейки (если вы используете тип bool)
можно не сравнивать её с истиной, а указать в условии имя переменной.
Например, вместо:

if (shell[i][j] == true)
{
…
}

Достаточно записать:

if (shell[i][j])
{
…
}

Такой трюк можно проделывать с переменными типа bool.

Что оценивается
• Программа заканчивает выполнение только после того, как не осталось целых
пузырей.
• Лопание пузырей производится с помощью прямоугольной области.
*/

#include <iostream>

void initShell(bool arr[][12]) {
  for (int i = 0; i < 12; ++i) {
    for (int j = 0; j < 12; ++j) {
      arr[i][j] = true;
    }
  }
}

int printShell(bool arr[][12]) {
  char xo[2] = {'x', 'o'};
  int count = 0;
  std::cout << std::endl;
  for (int i = 0; i < 12; ++i) {
    for (int j = 0; j < 12; ++j) {
      std::cout << xo[arr[i][j]];
      count += arr[i][j];
    }
    std::cout << std::endl;
  }
  std::cout << std::endl;
  return count;
}

void sayPop() { std::cout << "Pop!"; }

void popShell(bool arr[][12], int x1, int y1, int x2, int y2) {
  if (x1 > x2) {
    std::swap(x1, x2);
  }
  if (y1 > y2) {
    std::swap(y1, y2);
  }
  for (int i = x1; i <= x2; ++i) {
    for (int j = y1; j <= y2; ++j) {
      if (arr[i][j]) {
        arr[i][j] = false;
        sayPop();
      }
    }
  }
}

int main() {
  // Приветствие
  std::cout << "Массивы и Указатели в C++\n";
  std::cout << "Урок 3. Двумерные массивы и алгоритмы над ними\n";
  std::cout << "Практическая работа\n";
  std::cout << "Задание 5. Пупырка\n\n";

  bool shell[12][12];
  initShell(shell);

  int firstPointX, firstPointY;
  int secondPointX, secondPointY;
  while (printShell(shell) > 0) {
    bool incorrectInput = false;
    do {
      std::cout << "Введите два числа от 1 до 12 - координаты начала региона: ";
      std::cin >> firstPointX >> firstPointY;
      std::cout << "Введите два числа от 1 до 12 - координаты конца региона: ";
      std::cin >> secondPointX >> secondPointY;
      incorrectInput = firstPointX < 1 || firstPointX > 12;
      incorrectInput = incorrectInput || firstPointY < 1 || firstPointY > 12;
      incorrectInput = incorrectInput || secondPointX < 1 || secondPointX > 12;
      incorrectInput = incorrectInput || secondPointY < 1 || secondPointY > 12;
      if (incorrectInput) {
        std::cout << "Ошибка ввода целых чисел из отрезка [1;12].\n";
      }
    } while (incorrectInput);
    popShell(shell, firstPointX - 1, firstPointY - 1, secondPointX - 1,
             secondPointY - 1);
  }
  std::cout << "Не осталось целых пузырей.\n";
  return 0;
}