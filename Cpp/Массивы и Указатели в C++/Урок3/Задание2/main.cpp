/* Задание 2. Крестики-нолики

Что нужно сделать
Старая добрая игра на страницах всех школьных тетрадей. Поле размером 3 × 3
представлено в виде двумерного массива с типом элементов char. Участвуют два
игрока, они ходят по очереди и ставят в указанные ими в стандартном вводе
координаты свой символ — X или O (буквы латинского алфавита). Как только у
одного из игроков будет установлено подряд три крестика или три нолика, он
побеждает. Если свободных клеток не осталось, а трёх совпадающих элементов не
найдено, то объявляется ничья. Для простоты не будем рассматривать диагональные
совпадения — только строго вертикальные и строго горизонтальные. Изначально всё
поле инициализируется символом пробела — ‘ ‘(для обозначения пробела кавычки
одинарные и в одну сторону). Это можно сделать сразу при объявлении либо с
помощью вложенного цикла. На каждом ходе при занятой клетке или при неверных
координатах этой клетки должно быть выведено сообщение, и игрок должен указать
координаты клетки повторно. После каждого хода надо выводить в консоль текущее
состояние всего игрового поля для наглядности.

Советы и рекомендации
• Действия для обоих игроков одинаковые, отличаются только символом, который
ставится на поле.
• Игровой цикл не должен быть бесконечным. Игра имеет
определённое максимальное количество шагов.
• Не забывайте про случай ничьей.
• Как и в предыдущем задании, здесь будет удобно сразу заполнить массив
значениями false. Количество мест, доступных для заполнения, заранее известно. В
процессе заполнения из этой переменой нужно не забывать вычитать единицу. Чтобы
отметить место как занятое, нужно лишь написать places[i][j] = true;.
• Проверку на победу игрока, которую надо осуществлять после каждого хода,
можно сделать с помощью вложенного цикла, сразу проверяя и вертикаль,
и горизонталь, а как именно — попробуйте догадаться сами.
• Здесь заранее известно число ходов — 3 * 3. Столько раз должен быть выполнен
цикл, который спрашивает у очередного игрока координаты.
• Символ, который будет установлен в указанных координатах,
можно на каждом шаге менять подобным образом:

if (gamer_name == 'X')
gamer_name = 'O';
else
gamer_name = 'X';


Что оценивается
• Корректный ход игры, соответствующий правилам.
• Правильный (желательно красивый) вывод игрового поля.
• Понятный игроку интерфейс.
*/

#include <iostream>

void printCells(const char arr[][3]) {
  std::cout << "\n";
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < 3; ++j) {
      if (j < 2) {
        std::cout << " " << arr[i][j] << " |";
      } else {
        std::cout << " " << arr[i][j] << "\n";
      }
    }
    if (i < 2) {
      std::cout << "-----------\n";
    } else {
      std::cout << "\n";
    }
  }
}

void helpCells() {
  std::cout << "Позсказка по игровому полю:\n";
  std::cout << " 1 | 2 | 3 \n"
            << "-----------\n"
            << " 4 | 5 | 6 \n"
            << "-----------\n"
            << " 7 | 8 | 9 \n";
}

bool gameOver(const char arr[][3], char xo) {
  for (int i = 0; i < 3; ++i) {
    int countRow = 0;
    int countCol = 0;
    for (int j = 0; j < 3; ++j) {
      countRow += (arr[i][j] == xo);
      countCol += (arr[j][i] == xo);
    }
    if (countRow == 3 || countCol == 3) {
      return true;
    }
  }
  return false;
}

int main() {
  // Приветствие
  std::cout << "Массивы и Указатели в C++\n";
  std::cout << "Урок 3. Двумерные массивы и алгоритмы над ними\n";
  std::cout << "Практическая работа\n";
  std::cout << "Задание 2. Крестики-нолики\n\n";

  char cells[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
  bool places[3][3] = {
      {false, false, false}, {false, false, false}, {false, false, false}};

  helpCells();
  int numberOfMoves = 9;
  char gamerName = 'X';
  int move;
  int x, y;
  bool battleContinues = true;
  while (battleContinues && numberOfMoves > 0) {
    bool badMove = true;
    do {
      std::cout << "Куда поставить " << gamerName << "\n";
      std::cout << "Введите число от 1 до 9: ";
      std::cin >> move;
      if (move >= 1 && move <= 9) {
        x = (move - 1) / 3;
        y = (move - 1) % 3;
        if (places[x][y]) {
          std::cout << "\nКлетка занята!\n";
          printCells(cells);
          helpCells();
        } else {
          badMove = false;
        }
      } else {
        std::cout << "\nОшибка ввода числа от 1 до 9.\n";
        helpCells();
      }
    } while (badMove);

    places[x][y] = true;
    cells[x][y] = gamerName;
    printCells(cells);
    if (gameOver(cells, gamerName)) {
      battleContinues = false;
    } else {
      if (gamerName == 'X') {
        gamerName = 'O';
      } else {
        gamerName = 'X';
      }
    }

    --numberOfMoves;
  }

  //Вывод результата
  if (battleContinues) {
    std::cout << "Поздравляю с ничьей!\n";
  } else {
    if (gamerName == 'X') {
      std::cout << "Крестики выиграли!\n";
    } else {
      std::cout << "Нолики выиграли!\n";
    }
  }
  return 0;
}